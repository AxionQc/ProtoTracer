name: Build and Release Firmware HEX Files

on:
  push:
    branches: [ main, Testing ]
    paths-ignore:
      - 'firmware_builds/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-platformio-

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Install GNU Parallel
        run: |
          sudo apt-get update
          sudo apt-get install -y parallel

      - name: Build All Environments in Parallel
        run: |
          # Define all build environments
          environments=(
            teensy40hub75
            teensy40ws35
            teensy40beta
            teensy40verifyrender
            teensy40verifyhardware
            teensy41hub75
            teensy41ws35
            teensy41beta
            teensy41verifyrender
            teensy41verifyhardware
          )

          # Create a directory to store HEX files
          mkdir -p firmware_builds

          # Function to build a single environment
          build_env() {
            local env=$1
            echo "[$(date +%T)] Building environment: $env"
            platformio run -e "$env"

            # Define the source HEX file path
            # Replace 'firmware.hex' with your actual HEX file name if different
            source_hex=".pio/build/$env/firmware.hex"

            # Check if HEX file exists
            if [ -f "$source_hex" ]; then
              # Define the destination HEX file path with environment-specific naming
              dest_hex="firmware_builds/${env}.hex"

              # Copy the HEX file to the firmware_builds directory
              cp "$source_hex" "$dest_hex"

              echo "[$(date +%T)] Collected HEX file for $env at $dest_hex"
            else
              echo "[$(date +%T)] Error: HEX file not found for $env at $source_hex"
              exit 1
            fi
          }

          export -f build_env

          # Export the environments array as input to parallel
          printf "%s\n" "${environments[@]}" | parallel -j 4 build_env {}

          echo "[$(date +%T)] All build environments completed."

      - name: Upload Firmware Builds as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware_builds
          path: firmware_builds/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      VERSION_NUMBER: "v1.${{ github.run_number }}"  # Define VERSION_NUMBER here

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Firmware Builds Artifact
        uses: actions/download-artifact@v3
        with:
          name: firmware_builds
          path: firmware_builds/

      - name: Zip Firmware Builds with Version Number
        run: |
          # Navigate to the firmware_builds directory
          cd firmware_builds

          # Strip the leading 'v' from VERSION_NUMBER for the ZIP file name
          VERSION_NUM_ONLY="${{ env.VERSION_NUMBER }}"
          VERSION_NUM_ONLY="${VERSION_NUM_ONLY#v}"

          # Create a ZIP file named firmware_build_VERSIONNUMBER.zip in the root directory
          zip ../firmware_build_${VERSION_NUM_ONLY}.zip *.hex

          # Set the ZIP file name as an environment variable
          echo "ZIP_NAME=firmware_build_${VERSION_NUM_ONLY}.zip" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload ZIP
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.VERSION_NUMBER }}"
          name: "Firmware Build ${{ env.VERSION_NUMBER }}"
          body: |
            Automated firmware build for environments:
            - teensy40hub75
            - teensy40ws35
            - teensy40beta
            - teensy40verifyrender
            - teensy40verifyhardware
            - teensy41hub75
            - teensy41ws35
            - teensy41beta
            - teensy41verifyrender
            - teensy41verifyhardware
          files: firmware_build_${{ env.VERSION_NUMBER }}.zip
